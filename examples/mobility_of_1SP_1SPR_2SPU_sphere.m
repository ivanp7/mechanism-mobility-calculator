% Step 1: fill 'mechanism' array

tetrahedron = sqrt(8/3) * ...
              [[ sqrt(3)/3;    0; -1/4 * sqrt(6)/3], ...
               [-sqrt(3)/6;  1/2; -1/4 * sqrt(6)/3], ...
               [-sqrt(3)/6; -1/2; -1/4 * sqrt(6)/3], ...
               [         0;    0;  3/4 * sqrt(6)/3]];

sphere_radius = 1;
end_effector_radius = 0.25;

leg_inner_end_coordinates = end_effector_radius * tetrahedron;
leg_outer_end_coordinates = sphere_radius * tetrahedron;

leg_axes = leg_outer_end_coordinates - leg_inner_end_coordinates;

mechanism(1) = struct('matrix', ...
    [mmc_revolute_joint(leg_outer_end_coordinates(:, 2) - leg_outer_end_coordinates(:, 3), leg_inner_end_coordinates(:, 1)), ...
     mmc_prismatic_joint(leg_axes(:, 1)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 1))]);
mechanism(2) = struct('matrix', ...
    [mmc_universal_joint(leg_axes(:, 2), leg_inner_end_coordinates(:, 2)), ...
     mmc_prismatic_joint(leg_axes(:, 2)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 2))]);
mechanism(3) = struct('matrix', ...
    [mmc_universal_joint(leg_axes(:, 3), leg_inner_end_coordinates(:, 3)), ...
     mmc_prismatic_joint(leg_axes(:, 3)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 3))]);
mechanism(4) = struct('matrix', ...
    [mmc_prismatic_joint(leg_axes(:, 4)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 4))]);

mechanism_fixed(1) = struct('matrix', ...
    [mmc_revolute_joint(leg_outer_end_coordinates(:, 2) - leg_outer_end_coordinates(:, 3), leg_inner_end_coordinates(:, 1)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 1))]);
mechanism_fixed(2) = struct('matrix', ...
    [mmc_universal_joint(leg_axes(:, 2), leg_inner_end_coordinates(:, 2)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 2))]);
mechanism_fixed(3) = struct('matrix', ...
    [mmc_universal_joint(leg_axes(:, 3), leg_inner_end_coordinates(:, 3)), ...
     mmc_spherical_joint(leg_outer_end_coordinates(:, 3))]);
mechanism_fixed(4) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 4))]);

% Step 2: calculate everything
[F, delta, R, ~] = mmc_calculate_mobility(mechanism);
fprintf('Free:\n');
fprintf('F = %i, delta = %i, R = %i\n', F, delta, R);

[F, delta, R, ~] = mmc_calculate_mobility(mechanism_fixed);
fprintf('Fixed:\n');
fprintf('F = %i, delta = %i, R = %i\n', F, delta, R);
