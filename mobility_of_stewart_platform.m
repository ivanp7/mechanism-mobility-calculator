% Step 1: fill 'mechanism' array

platform_radius = 1;
mechanism_height = 1;
base_radius = 1;

platform_leg_pair_angle_delta = pi/3-pi/6;
base_leg_pair_angle_delta = pi/3+pi/6;

leg_pairs_coordinates = [2*pi/3 * [0, 1, 2]; 2*pi/3 * [0, 1, 2]];

leg_angle_coordinates = ...
    [[leg_pairs_coordinates(1, 1) - platform_leg_pair_angle_delta/2; leg_pairs_coordinates(2, 1) - base_leg_pair_angle_delta/2], ...
     [leg_pairs_coordinates(1, 1) + platform_leg_pair_angle_delta/2; leg_pairs_coordinates(2, 1) + base_leg_pair_angle_delta/2], ...
     [leg_pairs_coordinates(1, 2) - platform_leg_pair_angle_delta/2; leg_pairs_coordinates(2, 2) - base_leg_pair_angle_delta/2], ...
     [leg_pairs_coordinates(1, 2) + platform_leg_pair_angle_delta/2; leg_pairs_coordinates(2, 2) + base_leg_pair_angle_delta/2], ...
     [leg_pairs_coordinates(1, 3) - platform_leg_pair_angle_delta/2; leg_pairs_coordinates(2, 3) - base_leg_pair_angle_delta/2], ...
     [leg_pairs_coordinates(1, 3) + platform_leg_pair_angle_delta/2; leg_pairs_coordinates(2, 3) + base_leg_pair_angle_delta/2]];

leg_platform_end_coordinates = ...
    [platform_radius * [cos(leg_angle_coordinates(1, :)); ...
                        sin(leg_angle_coordinates(1, :))]; ...
     mechanism_height * ones(1, 6)];
leg_base_end_coordinates = ...
    [base_radius * [cos(leg_angle_coordinates(2, :)); ...
                    sin(leg_angle_coordinates(2, :))]; ...
     zeros(1, 6)];

leg_axes = leg_platform_end_coordinates - leg_base_end_coordinates;

for i = 6:-1:1
    mechanism(i) = struct('matrix', ...
        [mmc_universal_joint(leg_axes(:, i), leg_platform_end_coordinates(:, i)), ...
         mmc_cylindrical_joint(leg_axes(:, i), leg_base_end_coordinates(:, i)), ... %mmc_prismatic_joint(leg_axes(:, i)), ...
         mmc_universal_joint(leg_axes(:, i), leg_base_end_coordinates(:, i))]);
    mechanism_fixed(i) = struct('matrix', ...
        [mmc_universal_joint(leg_axes(:, i), leg_platform_end_coordinates(:, i)), ...
         mmc_revolute_joint(leg_axes(:, i), leg_base_end_coordinates(:, i)), ... %...
         mmc_universal_joint(leg_axes(:, i), leg_base_end_coordinates(:, i))]);
end

% Step 2: calculate everything
[F, delta, R, ~] = mmc_calculate_mobility(mechanism);
fprintf('Free:\n');
fprintf('F = %i, delta = %i, R = %i\n', F, delta, R);

[F, delta, R, ~] = mmc_calculate_mobility(mechanism_fixed);
fprintf('Fixed:\n');
fprintf('F = %i, delta = %i, R = %i\n', F, delta, R);
