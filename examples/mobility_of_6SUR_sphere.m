% Step 1: fill 'mechanism' array

octahedron = ...
    [[ 1;  0;  0], ...
     [-1;  0;  0], ...
     [ 0;  1;  0], ...
     [ 0; -1;  0], ...
     [ 0;  0;  1], ...
     [ 0;  0; -1]];

octahedron2 = ...
    [[ 0;  0;  1], ...
     [ 0;  0; -1], ...
     [ 1;  0;  0], ...
     [-1;  0;  0], ...
     [ 0;  1;  0], ...
     [ 0; -1;  0]];

octahedron3 = ...
    [[ 0;  1;  0], ...
     [ 0; -1;  0], ...
     [ 0;  0;  1], ...
     [ 0;  0; -1], ...
     [ 1;  0;  0], ...
     [-1;  0;  0]];

sphere_radius = 1;
end_effector_radius = 0.25;

leg_inner_chain_length = 0.2;
leg_outer_end_displacement = -0.1;

leg_inner_end_coordinates = end_effector_radius * octahedron;
leg_knee_coordinates = leg_inner_end_coordinates + leg_inner_chain_length * octahedron2;
leg_outer_end_coordinates = sphere_radius * octahedron + leg_outer_end_displacement * (octahedron2 + octahedron3);

leg_outer_chains_axes = leg_outer_end_coordinates - leg_knee_coordinates;
leg_inner_chains_axes = leg_knee_coordinates - leg_inner_end_coordinates;

mechanism(1) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 1)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 1), leg_knee_coordinates(:, 1)), ...
     mmc_revolute_joint(octahedron(:, 1), leg_inner_end_coordinates(:, 1))]);
mechanism(2) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 2)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 2), leg_knee_coordinates(:, 2)), ...
     mmc_revolute_joint(octahedron(:, 2), leg_inner_end_coordinates(:, 2))]);
mechanism(3) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 3)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 3), leg_knee_coordinates(:, 3)), ...
     mmc_revolute_joint(octahedron(:, 3), leg_inner_end_coordinates(:, 3))]);
mechanism(4) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 4)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 4), leg_knee_coordinates(:, 4)), ...
     mmc_revolute_joint(octahedron(:, 4), leg_inner_end_coordinates(:, 4))]);
mechanism(5) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 5)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 5), leg_knee_coordinates(:, 5)), ...
     mmc_revolute_joint(octahedron(:, 5), leg_inner_end_coordinates(:, 5))]);
mechanism(6) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 6)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 6), leg_knee_coordinates(:, 6)), ...
     mmc_revolute_joint(octahedron(:, 6), leg_inner_end_coordinates(:, 6))]);

mechanism_fixed(1) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 1)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 1), leg_knee_coordinates(:, 1))]);
mechanism_fixed(2) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 2)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 2), leg_knee_coordinates(:, 2))]);
mechanism_fixed(3) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 3)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 3), leg_knee_coordinates(:, 3))]);
mechanism_fixed(4) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 4)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 4), leg_knee_coordinates(:, 4))]);
mechanism_fixed(5) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 5)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 5), leg_knee_coordinates(:, 5))]);
mechanism_fixed(6) = struct('matrix', ...
    [mmc_spherical_joint(leg_outer_end_coordinates(:, 6)), ...
     mmc_universal_joint(leg_inner_chains_axes(:, 6), leg_knee_coordinates(:, 6))]);

% Step 2: calculate everything
[F, delta, R, ~] = mmc_calculate_mobility(mechanism);
fprintf('Free:\n');
fprintf('F = %i, delta = %i, R = %i\n', F, delta, R);

[F, delta, R, ~] = mmc_calculate_mobility(mechanism_fixed);
fprintf('Fixed:\n');
fprintf('F = %i, delta = %i, R = %i\n', F, delta, R);
